# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:

# 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

def even(n)
  if n % 2 == 0
    even = true
  else
    even = false
  end
end

x = 1
y = 0
z = 0
sum = 0

while z < 4000000
  z = x + y
  if even(z) == true
    sum += z
  end
  y = x
  x = z
end

puts sum



# The Fibonacci sequence is defined by the recurrence relation:

# Fn = Fn−1 + Fn−2, where F1 = 1 and F2 = 1.
# Hence the first 12 terms will be:

# F1 = 1
# F2 = 1
# F3 = 2
# F4 = 3
# F5 = 5
# F6 = 8
# F7 = 13
# F8 = 21
# F9 = 34
# F10 = 55
# F11 = 89
# F12 = 144
# The 12th term, F12, is the first term to contain three digits.

# What is the index of the first term in the Fibonacci sequence to contain 1000 digits?



class Bignum
  def num_digits
    Math.log10(self).to_i + 1
  end
end


fibonacci = [1234]

until fibonacci[fibonacci.length-1].num_digits == 1000
  z = x + y
  fibonacci.push(z)
  y = x
  x = z
end

puts fibonacci.length

start = Time.now
x = 1
y = 0
digits = 0
index = 1
until digits >= 1000
  z = x + y
  puts z
  string = z.to_s.scan(/./)
  integers = []
  string.each do |x|
    integers.push(x.to_i)
  end
  digits = integers.length
  index += 1
  y = x
  x = z
end
puts index
finish = Time.now
"Calculation took #{finish - start} seconds"
