
# Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

# 1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

# It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference, 70 − 22 = 48, is not pentagonal.

# Find the pair of pentagonal numbers, Pj and Pk, for which their sum and difference are pentagonal and D = |Pk − Pj| is minimised; what is the value of D?



# The simplest way to test whether a positive integer x is a (non-generalized) pentagonal number is by computing

# n = Math.sqrt((24 * x + 1) + 1)  / 6

# The number x is pentagonal if and only if n is a natural number. In that case x is the nth pentagonal number.


class Fixnum
  def pentagonal?
    n = (Math.sqrt(24 * self + 1)) + 1  / 6
    n % 1 == 0 ? true : false
  end

  def nth_pentagonal
    n = (self * ((3 * self) - 1)) / 2
  end
end

# Iterate pentagonally, using nth_pentagonal, with n incrementing
#

pentagonal_D = Hash.new
# Key is the two pentagonal numbers Pj + Pk
# Value is the difference
# Answer will be the lowest value


(1..10000).each do |x|
  a = x.nth_pentagonal
  (x..10000).each do |y|
    sum = false
    diff = false
    b = y.nth_pentagonal
    sum = true if (a + b).pentagonal?
    diff = true if (b - a).pentagonal?
    (pentagonal_D["#{x} + #{y}: #{a} + #{b}"] = ("D = #{b - a}")) if (sum == true && diff == true)
  end
end

pentagonal_D.each do |key, value|
  puts key + " : " + value
end


#########################


pentagonal_D = Hash.new

notFound = true
x = 1
while notFound
  x += 1
  a = x.nth_pentagonal
  (x-1).downto(1).each do |y|
    b = y.nth_pentagonal
    sum = false
    diff = false
    sum = true if (a + b).pentagonal?
    diff = true if (b - a).pentagonal?
    if (sum == true && diff == true)
      result = b - a
      (pentagonal_D["#{x} + #{y}: #{a} + #{b}"] = ("D = #{result}"))
      notFound = false
      break
    end
 end
end
